
// Bool
typedef struct {
	uint value: 1;
    uint : 31;
} bool <read=read_bool>;

string read_bool(bool &b) {
    if(b.value == 1)
        return "true";
    else
        return "false";
}

// String
typedef struct {
	int len <bgcolor=0x000077>;
    SetBackColor(0x000044 + len);

	// DÃ©tection utf8
	if (len < 0) {
		wchar_t chars[Abs(len)];
	}
	else {
		char chars[len];
	}
} String <read=read_string>;

string read_string(String &s) {
    if(exists(s.chars))
        return s.chars;
    else
        return "<empty>";
}

// Plot Table
typedef struct {
    uint b00: 1;
    uint b01: 1;
    uint b02: 1;
    uint b03: 1;
    uint b04: 1;
    uint b05: 1;
    uint b06: 1;
    uint b07: 1;
    uint b08: 1;
    uint b09: 1;
    uint b10: 1;
    uint b11: 1;
    uint b12: 1;
    uint b13: 1;
    uint b14: 1;
    uint b15: 1;
    uint b16: 1;
    uint b17: 1;
    uint b18: 1;
    uint b19: 1;
    uint b20: 1;
    uint b21: 1;
    uint b22: 1;
    uint b23: 1;
    uint b24: 1;
    uint b25: 1;
    uint b26: 1;
    uint b27: 1;
    uint b28: 1;
    uint b29: 1;
    uint b30: 1;
    uint b31: 1;
} BitField;

struct BitArray {
	uint len;
    BitField bit_field[len];
};

struct PlotTable {
	BitArray bool_variables <bgcolor=0x5555ff>;
    struct {
        int len;
        int pair[len];
    } int_variables <bgcolor=0x88ff55>;
    struct {
        int len;
        float pair[len];
    } float_variables <bgcolor=0xff8855>;
};

// Timestamp
typedef struct {
	int seconds_since_midnight;
	int day;
	int month;
	int year;
} SaveTimeStamp <read=read_timestamp>;

string read_timestamp(SaveTimeStamp &t) {
    string s;
    SPrintf(s, "%is, %id, %im, %iy", t.seconds_since_midnight, t.day, t.month, t.year);
    return s;
}

// Vector
typedef struct {
	float x;
	float y;
	float z;
} Vector <read=read_vector>;

string read_vector(Vector &v) {
    string s;
    SPrintf(s, "[%g, %g, %g]", v.x, v.y, v.z);
    return s;
}

// Rotation
typedef struct {
	int pitch;
	int yaw;
	int roll;
} Rotation <read=read_rotation>;

string read_rotation(Rotation &r) {
    string s;
    SPrintf(s, "[%i, %i, %i]", r.pitch, r.yaw, r.roll);
    return s;
}

// Appearance
enum <ubyte> PlayerAppearanceType {
	Parts,
	Full
};

struct MorphFeature {
    String feature;
	float offset;
};

struct OffsetBone {
	String name;
	Vector offset;
};

struct ScalarParameter {
	String name;
	float value;
};

typedef struct {
	float r;
	float g;
	float b;
	float a;
} LinearColor <read=read_linear_color>;

string read_linear_color(LinearColor &c) {
    string s;
    SPrintf(s, "r: %g, g: %g, b: %g, a: %g]", c.r, c.g, c.b, c.a);
    return s;
}


struct VectorParameter {
	String name;
	LinearColor value;
};

struct TextureParameter {
	String name;
	String value;
};

struct HeadMorph {
	String hair_mesh;
    struct {
        int len;
        String mesh[len];
    } accessory_mesh;
    struct {
        int len;
        MorphFeature feature[len] <optimize=false>;
    } morph_features;
    struct {
        int len;
        OffsetBone bone[len] <optimize=false>;
    } offset_bones;
    struct {
        int len;
        Vector vertice[len];
    } lod0_vertices;
    struct {
        int len;
        Vector vertice[len];
    } lod1_vertices;
    struct {
        int len;
        Vector vertice[len];
    } lod2_vertices;
    struct {
        int len;
        Vector vertice[len];
    } lod3_vertices;
    struct {
        int len;
        ScalarParameter scalar[len] <optimize=false>;
    } scalar_parameters;
    struct {
        int len;
        VectorParameter vector[len] <optimize=false>;
    } vector_parameters;
    struct {
        int len;
        TextureParameter texture[len] <optimize=false>;
    } texture_parameters;
};

// Player
enum <byte> Origin {
	None,
	Spacer,
	Colonist,
	Earthborn,
};

enum <byte> Notoriety {
	NoneN,
	Survivor,
	Warhero,
	Ruthless,
};

struct SimpleTalent {
    int talent_id;
    int ranks;
};

struct ComplexTalent {
    int talent_id;
    int ranks;
    int max_rank;
    int level_offset;
    int levels_per_rank;
    int visual_order;
    struct {
        int len <bgcolor=0x888888>;
        int list[len];
    } prereq_talent_id_array;
    struct {
        int len <bgcolor=0x888888>;
        int list[len];
    } prereq_talent_rank_array;
};

struct BioItemXMod {
    int id;
    byte type_enum;
    int manufacturer_id;
    FSkip(4);
};

struct BioItemXModdable {
    int id;
    byte item_level;
    int manufacturer_id;
    FSkip(4);
    bool unknown1;
    bool unknown2;
    struct {
        int len <bgcolor=0x88eecc>;
        BioItemXMod list[len] <optimize=false>;
    } slot_spec <bgcolor=0x88ffff>;
};

struct Inventory {
    struct {
        int len <bgcolor=0x8888ff>;
        BioItemXModdable list[len] <optimize=false>;
    } equipped <bgcolor=0x88ff33>;
    struct {
        int len <bgcolor=0x8888ff>;
        BioItemXModdable list[len] <optimize=false>;
    } quick_slot <bgcolor=0x88ff33>;
    struct {
        int len <bgcolor=0x8888ff>;
        BioItemXModdable list[len] <optimize=false>;
    } inventory <bgcolor=0x88ff33>;
    struct {
        int len <bgcolor=0x8888ff>;
        BioItemXModdable list[len] <optimize=false>;
    } saved_backpack_items <bgcolor=0x88ff33>;
};

struct Player {
	bool is_female;
    int localized_class_name;
    FSkip(1);
    int level;
    float current_xp;
    String name;
    int last_name;
    Origin origin;
    Notoriety notoriety;
    FSkip(13);
    String none;
	bool has_head_morph;
	if (has_head_morph.value == 1) {
		HeadMorph head_morph;
	}
    struct {
        int len <bgcolor=0xaaaaaa>;
        SimpleTalent list[len] <optimize=false>;
    } simple_talents <bgcolor=0xaaaa88>;
    struct {
        int len <bgcolor=0x88aaaa>;
        ComplexTalent list[len] <optimize=false>;
    } complex_talents <bgcolor=0x88aa88>;
    Inventory inventory;
    int credits <bgcolor=0x0000ff>;
    int grenades <bgcolor=0x0000dd>;
    float medigel <bgcolor=0x0000bb>;
    float salvage <bgcolor=0x000099>;
    String face_code;
};

// ME1 Legendary
struct Unknown2 {
    int id <bgcolor=0x6666ff>;
    FSkip(4);
    int len <bgcolor=0x88ccff>;
    int list[len];
};

struct Unknown4 {
    int len <bgcolor=0x88ccee>;
    int list[len * 2];
};

struct {
    uint version;
    String career_id;
    FSkip(16);
    PlotTable plot;
    FSkip(4);
    struct {
        int len;
        Unknown2 list[len] <optimize=false>;
    } unknown2 <bgcolor=0x88ffff>;
    struct {
        int len <bgcolor=0xff44ff>;
        int list[len];
    } unknown3 <bgcolor=0xaaaa88>;
    struct {
        int len <bgcolor=0x44ddff>;
        Unknown4 list[len] <optimize=false>;
    } unknown4 <bgcolor=0xaa88aa>;
    struct {
        int len <bgcolor=0xff44ff>;
        int list[len];
    } unknown5 <bgcolor=0xaaaa88>;
	SaveTimeStamp timestamp <bgcolor=0xaa44aa>;
	int seconds_played <bgcolor=0xaa44cc>;
    Player player;
} Me1Legendary <open=true>;